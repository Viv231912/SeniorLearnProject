// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SeniorLearn.WebApp.Data;

#nullable disable

namespace SeniorLearn.WebApp.Data.Configuration.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("org")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("PaymentSequence");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "org");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "org");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "org");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "org");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "org");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "org");
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.DeliveryPattern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DeliveryMode")
                        .HasColumnType("int")
                        .HasColumnName("DeliveryMode");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<bool>("IsCourse")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfessionalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalId");

                    b.ToTable("DeliveryPatterns", "timetable");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DeliveryPattern");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Enrolment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("MemberId");

                    b.ToTable("Enrolments", "timetable");
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Identity.RoleUpdate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RenewalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserRoleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserRoleTypeId");

                    b.ToTable("RoleUpdates", "org");
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "org");
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Identity.UserRoleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRolesTypes", "org");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassDurationInMinutes")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryMode")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryPatternId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("TimetableId")
                        .HasColumnType("int");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryPatternId");

                    b.HasIndex("Start");

                    b.HasIndex("TimetableId");

                    b.HasIndex("TopicId");

                    b.ToTable("Lessons", "timetable", t =>
                        {
                            t.HasCheckConstraint("CK_Lessons_StatusId", "StatusId >= 1 AND StatusId <= 5");
                        });

                    b.HasDiscriminator<string>("Discriminator").HasValue("Lesson");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<decimal>("OutstandingFees")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<DateTime>("RenewalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Members", "org");
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Organisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimetableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Organisations", "org");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "SeniorLearn",
                            TimetableId = 1
                        });
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [org].[PaymentSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Timetable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId")
                        .IsUnique();

                    b.ToTable("Timetables", "timetable");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrganisationId = 1
                        });
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Topics", "timetable");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Philosophy is the study of fundamental questions related to existence, knowledge, values, reason, and language through critical, analytical, and systematic approaches.",
                            Name = "Philosophy",
                            OrganisationId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Mathematics involves the study of quantity, structure, space, and change, forming the foundation for understanding abstract concepts and physical phenomena.",
                            Name = "Mathematics",
                            OrganisationId = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "History examines past events to understand human societies, analyzing documents and artifacts to interpret societal development and change.",
                            Name = "History",
                            OrganisationId = 1
                        },
                        new
                        {
                            Id = 4,
                            Description = "Biology is the science of life, studying living organisms, their structure, function, growth, origin, evolution, and distribution.",
                            Name = "Biology",
                            OrganisationId = 1
                        },
                        new
                        {
                            Id = 5,
                            Description = "Computer Science focuses on the theory, design, and application of computer systems, covering areas such as algorithms, computation, and data processing.",
                            Name = "Computer Science",
                            OrganisationId = 1
                        },
                        new
                        {
                            Id = 6,
                            Description = "Physics studies matter, energy, and the fundamental forces of the universe, seeking to understand the laws governing physical phenomena.",
                            Name = "Physics",
                            OrganisationId = 1
                        },
                        new
                        {
                            Id = 7,
                            Description = "Chemistry investigates the properties and behavior of matter, exploring how substances interact with energy and undergo changes.",
                            Name = "Chemistry",
                            OrganisationId = 1
                        },
                        new
                        {
                            Id = 8,
                            Description = "Economics analyzes how individuals and societies allocate resources to satisfy needs and wants, examining the consequences of those decisions.",
                            Name = "Economics",
                            OrganisationId = 1
                        },
                        new
                        {
                            Id = 9,
                            Description = "English Literature explores written works in the English language, emphasizing literary analysis and interpretation across genres.",
                            Name = "English Literature",
                            OrganisationId = 1
                        },
                        new
                        {
                            Id = 10,
                            Description = "Environmental Science studies the interactions between the environment's physical, chemical, and biological components.",
                            Name = "Environmental Science",
                            OrganisationId = 1
                        },
                        new
                        {
                            Id = 11,
                            Description = "Art History examines the development of visual arts across cultures and periods, including painting, sculpture, and architecture.",
                            Name = "Art History",
                            OrganisationId = 1
                        },
                        new
                        {
                            Id = 12,
                            Description = "Political Science studies government systems, political behavior, and the theoretical and practical aspects of politics.",
                            Name = "Political Science",
                            OrganisationId = 1
                        },
                        new
                        {
                            Id = 13,
                            Description = "Psychology is the scientific study of the mind and behavior, exploring how humans perceive, think, feel, and act.",
                            Name = "Psychology",
                            OrganisationId = 1
                        },
                        new
                        {
                            Id = 14,
                            Description = "Sociology investigates human social behavior, including the development, structure, and functioning of human society.",
                            Name = "Sociology",
                            OrganisationId = 1
                        },
                        new
                        {
                            Id = 15,
                            Description = "Music Theory analyzes the elements of music, including harmony, melody, rhythm, and form, to understand musical composition.",
                            Name = "Music Theory",
                            OrganisationId = 1
                        },
                        new
                        {
                            Id = 16,
                            Description = "Philosophy of Science examines the foundations, methods, and implications of science, questioning the nature of scientific knowledge.",
                            Name = "Philosophy of Science",
                            OrganisationId = 1
                        },
                        new
                        {
                            Id = 17,
                            Description = "World Religions explores various global belief systems, their teachings, practices, and impacts on societies.",
                            Name = "World Religions",
                            OrganisationId = 1
                        },
                        new
                        {
                            Id = 18,
                            Description = "Anthropology studies humans, their ancestors, and related primates, focusing on cultural, social, and physical aspects.",
                            Name = "Anthropology",
                            OrganisationId = 1
                        },
                        new
                        {
                            Id = 19,
                            Description = "Linguistics studies language structure, development, and variation, including syntax, semantics, phonetics, and phonology.",
                            Name = "Linguistics",
                            OrganisationId = 1
                        },
                        new
                        {
                            Id = 20,
                            Description = "Creative Writing focuses on the art of writing fiction and poetry, emphasizing creativity, narrative techniques, and expression.",
                            Name = "Creative Writing",
                            OrganisationId = 1
                        });
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Views.ScheduledLesson", b =>
                {
                    b.Property<int>("ClassDurationInMinutes")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryPatternId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsCourse")
                        .HasColumnType("bit");

                    b.Property<int>("ProfessionalId")
                        .HasColumnType("int");

                    b.Property<string>("Professor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TimetableId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("ViewScheduledLessons", "timetable");
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Daily", b =>
                {
                    b.HasBaseType("SeniorLearn.WebApp.Data.DeliveryPattern");

                    b.Property<DateTime>("EndOn")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("datetime2");

                    b.Property<int>("EndStrategyId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<int>("Occurrences")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Daily");
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.NonRepeating", b =>
                {
                    b.HasBaseType("SeniorLearn.WebApp.Data.DeliveryPattern");

                    b.HasDiscriminator().HasValue("NonRepeating");
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Weekly", b =>
                {
                    b.HasBaseType("SeniorLearn.WebApp.Data.DeliveryPattern");

                    b.Property<DateTime>("EndOn")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("datetime2");

                    b.Property<int>("EndStrategyId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<bool>("Friday")
                        .HasColumnType("bit");

                    b.Property<bool>("Monday")
                        .HasColumnType("bit");

                    b.Property<int>("Occurrences")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<bool>("Saturday")
                        .HasColumnType("bit");

                    b.Property<bool>("Sunday")
                        .HasColumnType("bit");

                    b.Property<bool>("Thursday")
                        .HasColumnType("bit");

                    b.Property<bool>("Tuesday")
                        .HasColumnType("bit");

                    b.Property<bool>("Wednesday")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("Weekly");
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Identity.Honorary", b =>
                {
                    b.HasBaseType("SeniorLearn.WebApp.Data.Identity.UserRoleType");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Honorary", "org");
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Identity.Professional", b =>
                {
                    b.HasBaseType("SeniorLearn.WebApp.Data.Identity.UserRoleType");

                    b.Property<string>("Discipline")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Professional", "org");
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Identity.Standard", b =>
                {
                    b.HasBaseType("SeniorLearn.WebApp.Data.Identity.UserRoleType");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.ToTable("Standard", "org");
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.LessonOnPremises", b =>
                {
                    b.HasBaseType("SeniorLearn.WebApp.Data.Lesson");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Lessons_StatusId", "StatusId >= 1 AND StatusId <= 5");
                        });

                    b.HasDiscriminator().HasValue("LessonOnPremises");
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.LessonOnline", b =>
                {
                    b.HasBaseType("SeniorLearn.WebApp.Data.Lesson");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Lessons_StatusId", "StatusId >= 1 AND StatusId <= 5");
                        });

                    b.HasDiscriminator().HasValue("LessonOnline");
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Cash", b =>
                {
                    b.HasBaseType("SeniorLearn.WebApp.Data.Payment");

                    b.ToTable("PaymentsCash", "finance");
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Cheque", b =>
                {
                    b.HasBaseType("SeniorLearn.WebApp.Data.Payment");

                    b.Property<bool>("Cleared")
                        .HasColumnType("bit");

                    b.ToTable("PaymentsCheque", "finance");
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.CreditCard", b =>
                {
                    b.HasBaseType("SeniorLearn.WebApp.Data.Payment");

                    b.Property<int>("AuthorisationNumber")
                        .HasColumnType("int");

                    b.Property<string>("CardIssuer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("PaymentsCreditCard", "finance");
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.ElectronicFundTransfer", b =>
                {
                    b.HasBaseType("SeniorLearn.WebApp.Data.Payment");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("PaymentsElectronicFundTransfer", "finance");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SeniorLearn.WebApp.Data.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SeniorLearn.WebApp.Data.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SeniorLearn.WebApp.Data.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SeniorLearn.WebApp.Data.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.DeliveryPattern", b =>
                {
                    b.HasOne("SeniorLearn.WebApp.Data.Identity.Professional", "Professional")
                        .WithMany("DeliveryPatterns")
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Professional");
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Enrolment", b =>
                {
                    b.HasOne("SeniorLearn.WebApp.Data.Lesson", "Lesson")
                        .WithMany("Enrolments")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SeniorLearn.WebApp.Data.Member", "Member")
                        .WithMany("Enrolments")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Identity.RoleUpdate", b =>
                {
                    b.HasOne("SeniorLearn.WebApp.Data.Identity.UserRoleType", null)
                        .WithMany("Updates")
                        .HasForeignKey("UserRoleTypeId");
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Identity.UserRoleType", b =>
                {
                    b.HasOne("SeniorLearn.WebApp.Data.Identity.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Lesson", b =>
                {
                    b.HasOne("SeniorLearn.WebApp.Data.DeliveryPattern", "DeliveryPattern")
                        .WithMany("Lessons")
                        .HasForeignKey("DeliveryPatternId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SeniorLearn.WebApp.Data.Timetable", "Timetable")
                        .WithMany("Lessons")
                        .HasForeignKey("TimetableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SeniorLearn.WebApp.Data.Topic", "Topic")
                        .WithMany("Lessons")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DeliveryPattern");

                    b.Navigation("Timetable");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Member", b =>
                {
                    b.HasOne("SeniorLearn.WebApp.Data.Organisation", "Organisation")
                        .WithMany("Members")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SeniorLearn.WebApp.Data.Identity.User", "User")
                        .WithOne("Member")
                        .HasForeignKey("SeniorLearn.WebApp.Data.Member", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Organisation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Payment", b =>
                {
                    b.HasOne("SeniorLearn.WebApp.Data.Member", "Member")
                        .WithMany("Payments")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Timetable", b =>
                {
                    b.HasOne("SeniorLearn.WebApp.Data.Organisation", "Organisation")
                        .WithOne("Timetable")
                        .HasForeignKey("SeniorLearn.WebApp.Data.Timetable", "OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Topic", b =>
                {
                    b.HasOne("SeniorLearn.WebApp.Data.Organisation", "Organisation")
                        .WithMany("Topics")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Identity.Honorary", b =>
                {
                    b.HasOne("SeniorLearn.WebApp.Data.Identity.UserRoleType", null)
                        .WithOne()
                        .HasForeignKey("SeniorLearn.WebApp.Data.Identity.Honorary", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Identity.Professional", b =>
                {
                    b.HasOne("SeniorLearn.WebApp.Data.Identity.UserRoleType", null)
                        .WithOne()
                        .HasForeignKey("SeniorLearn.WebApp.Data.Identity.Professional", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Identity.Standard", b =>
                {
                    b.HasOne("SeniorLearn.WebApp.Data.Identity.UserRoleType", null)
                        .WithOne()
                        .HasForeignKey("SeniorLearn.WebApp.Data.Identity.Standard", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.DeliveryPattern", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Identity.User", b =>
                {
                    b.Navigation("Member");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Identity.UserRoleType", b =>
                {
                    b.Navigation("Updates");
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Lesson", b =>
                {
                    b.Navigation("Enrolments");
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Member", b =>
                {
                    b.Navigation("Enrolments");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Organisation", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Timetable")
                        .IsRequired();

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Timetable", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Topic", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("SeniorLearn.WebApp.Data.Identity.Professional", b =>
                {
                    b.Navigation("DeliveryPatterns");
                });
#pragma warning restore 612, 618
        }
    }
}
